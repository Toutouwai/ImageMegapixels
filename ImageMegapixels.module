<?php namespace ProcessWire;

/**
 *
 * Image Megapixels
 *
 * @author Robin Sallis
 *
 * ProcessWire 3.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class ImageMegapixels extends WireData implements Module {

	/**
	 * Module information
	 */
	public static function getModuleInfo() {
		return array(
			'title' => "Image Megapixels",
			'summary' => 'Adds a method for Pageimages that resizes to a target megapixel value.',
			'version' => '0.1.0',
			'author' => 'Robin Sallis',
			'href' => 'https://github.com/Toutouwai/ImageMegapixels',
			'icon' => 'arrows-alt',
			'autoload' => true,
		);
	}

	/**
	 * Ready
	 */
	public function ready() {
		$this->addHookMethod('Pageimage::megapixels', $this, 'megapixels');
	}

	/**
	 * Return an image (Pageimage) resized to a target megapixel value
	 *
	 * @param HookEvent $event
	 */
	public function megapixels(HookEvent $event) {

		/* @var Pageimage $pageimage */
		$pageimage = $event->object;
		$megapixels = $event->arguments(0);
		$options = $event->arguments(1) ?: array(); // ImageSizer options if any

		// Return unmodified Pageimage if first argument not supplied
		if(!$megapixels) {
			$event->return = $pageimage;
			return;
		}

		$pixels = $megapixels * 1000000;
		$image_width = $pageimage->width;
		$image_height = $pageimage->height;

		// Return unmodified Pageimage if smaller than target megapixels
		if($image_width * $image_height <= $pixels) {
			$event->return = $pageimage;
			return;
		}

		$ratio = $image_height / $image_width;
		$new_width = sqrt($pixels / $ratio);
		$new_height = $new_width * $ratio;

		$event->return = $pageimage->size(round($new_width), round($new_height), $options);

	}

}
