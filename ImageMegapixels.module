<?php namespace ProcessWire;

class ImageMegapixels extends WireData implements Module {

	/**
	 * Module information
	 */
	public static function getModuleInfo() {
		return array(
			'title' => "Image Megapixels",
			'summary' => 'Adds methods to Pageimage objects useful for resizing to a target megapixel value.',
			'version' => '0.2.0',
			'author' => 'Robin Sallis',
			'href' => 'https://github.com/Toutouwai/ImageMegapixels',
			'icon' => 'arrows-alt',
			'autoload' => true,
			'requires' => 'ProcessWire>=3.0.0, PHP>=5.4.0',
		);
	}

	/**
	 * Ready
	 */
	public function ready() {
		$this->addHookMethod('Pageimage::megapixels', $this, 'megapixels');
		$this->addHookMethod('Pageimage::megapixelsDimensions', $this, 'megapixelsDimensions');
	}

	/**
	 * Get a Pageimage resized to a target megapixel value
	 *
	 * @param HookEvent $event
	 */
	public function megapixels(HookEvent $event) {

		/** @var Pageimage $pageimage */
		$pageimage = $event->object;
		$megapixels = $event->arguments(0);
		$options = $event->arguments(1) ?: []; // ImageSizer options if any

		// Return unmodified Pageimage if first argument not supplied
		if(!$megapixels) {
			$event->return = $pageimage;
			return;
		}

		$pixels = $megapixels * 1000000;
		$image_width = $pageimage->width;
		$image_height = $pageimage->height;

		// Return unmodified Pageimage if smaller than target megapixels if image upscaling disabled
		if(!$this->wire()->config->imageSizerOptions('upscaling') && $image_width * $image_height <= $pixels) {
			$event->return = $pageimage;
			return;
		}

		$dimensions = $this->getMegapixelsDimensions($pageimage, $megapixels);

		$event->return = $pageimage->size($dimensions['width'], round($dimensions['height']), $options);
	}

	/**
	 * Hook method
	 * Get the width and height needed to resize a Pageimage to a target megapixel value
	 *
	 * @param HookEvent $event
	 */
	public function megapixelsDimensions(HookEvent $event) {
		/** @var Pageimage $pageimage */
		$pageimage = $event->object;
		$megapixels = $event->arguments(0);
		$event->return = $this->getMegapixelsDimensions($pageimage, $megapixels);
	}

	/**
	 * Get the width and height needed to resize a Pageimage to a target megapixel value
	 *
	 * @param Pageimage $pageimage
	 * @param int $megapixels
	 * @return array
	 */
	protected function getMegapixelsDimensions(Pageimage $pageimage, $megapixels) {

		$out = [
			'width' => null,
			'height' => null,
		];

		// Return null values if first argument not supplied
		if(!$megapixels) return $out;

		$pixels = $megapixels * 1000000;
		$image_width = $pageimage->width;
		$image_height = $pageimage->height;

		$ratio = $image_height / $image_width;
		$out['width'] = (int) round(sqrt($pixels / $ratio));
		$out['height'] = (int) round($out['width'] * $ratio);

		return $out;
	}

}
